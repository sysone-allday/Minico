package allday.minico.controller.typinggame;

import allday.minico.dto.note.Note;
import allday.minico.dto.typinggame.BlankGame;
import allday.minico.dto.typinggame.Word;
import allday.minico.service.note.NoteService;
import allday.minico.service.note.NoteServiceImpl;
import allday.minico.service.typinggame.BlankGameService;
import allday.minico.service.typinggame.BlankGameServiceImpl;
import allday.minico.session.AppSession;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.OverrunStyle;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class BlankGameController {

    @FXML private StackPane introPane;
    @FXML private Pane wordListPane;
    @FXML private Button backButton;
    @FXML private Label questionLabel;
    @FXML private Label successCount;
    @FXML private Label failCount;
    @FXML private TextField inputField;
    @FXML private StackPane resultPane;
    @FXML private Label resultSuccessLabel;
    @FXML private Label resultFailLabel;
    @FXML private Label timerLabel;
    @FXML private ImageView catImage;

    private BlankGameService blankGameService;
    private NoteService noteService;
    private List<Word> successWords;
    private List<BlankGame> problemList;
    private final List<Note> wrongList = new ArrayList<>();
    private int currentProblemIndex = 0;
    private int success = 0;
    private int fail = 0;

    private Image neutralCat;
    private Image smileCat;
    private Image sadCat;
    private String currentCatStatus = "neutral";  // "smile", "sad", "neutral"

    @FXML
    public void initialize() {

        blankGameService = new BlankGameServiceImpl();
        noteService = new NoteServiceImpl();

        // Ïù¥ÎØ∏ÏßÄ Ìïú Î≤àÎßå Î°úÎî©
        neutralCat = new Image(getClass().getResource("/allday/minico/images/typinggame/cat-Photoroom1.png").toExternalForm());
        smileCat = new Image(getClass().getResource("/allday/minico/images/typinggame/happy-cat1.png").toExternalForm());
        sadCat = new Image(getClass().getResource("/allday/minico/images/typinggame/cry-cat1.png").toExternalForm());



        // Ï¥àÍ∏∞ Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
        catImage.setImage(neutralCat);
    }

    public void setSuccessWords(List<Word> words) {
        this.successWords = words;
        for (Word word : words) {
            System.out.println("ÎÑòÏñ¥Ïò® Îã®Ïñ¥: " + word.getWord_id() + ", Îúª: " + word.getText());
        }
        initBlankGame();
    }

    private void initBlankGame() {
        showWordList();   // Î≥¥Í∏∞ Îã®Ïñ¥ ÌëúÏãú
        getBlankProblems(); // Î¨∏Ï†ú Ï°∞Ìöå Î∞è ÏãúÏûë
        showIntro();
    }

    // Í≤åÏûÑ ÏãúÏûëÏ†Ñ ÏÑ§Î™Ö Î≥¥Ïó¨Ï£ºÍ∏∞
    private void showIntro() {
        introPane.setVisible(true);
    }

    // Í≤åÏûÑ ÏãúÏûë Î≤ÑÌäº
    @FXML
    private void startBlankGame() {
        introPane.setVisible(false);    // ÏÑ§Î™ÖÏ∞Ω Ïà®Í∏∞Í∏∞

        questionLabel.setText("Î¨∏Ï†úÎ•º Ï§ÄÎπÑ Ï§ëÏù¥Ïïº ! \n ÌûåÌä∏ÏóêÏÑú ÎßûÎäî ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•Ìï¥Ï§ò ~ ");

        // 3Ï¥à ÌõÑ Î¨∏Ï†ú Î≥¥Ïó¨Ï£ºÍ∏∞
        new Thread(() -> {
            try {
                Thread.sleep(3000); // 1Ï¥à ÎåÄÍ∏∞
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            javafx.application.Platform.runLater(this::showCurrentProblem);
        }).start();
    }

    // Î≥¥Í∏∞ Î™©Î°ù Î≥¥Ïó¨Ï£ºÍ∏∞
    private void showWordList() {
        wordListPane.getChildren().clear();
        FlowPane flowPane = new FlowPane();
        flowPane.setHgap(20);
        flowPane.setVgap(30);
        flowPane.setLayoutX(80);
        flowPane.setLayoutY(70);
        flowPane.setPrefWrapLength(700);
        flowPane.setStyle("-fx-background-color: transparent;");

        for (Word word : successWords) {
            String wordText = word.getText();

            Text tempText = new Text(wordText);
            Font font = Font.font("NeoDunggeunmo", 20);
            tempText.setFont(font);
            double textWidth = tempText.getLayoutBounds().getWidth();

            Label label = new Label(wordText);
            label.setFont(font);
//            label.setStyle("-fx-border-color: #ccc; -fx-padding: 5 10;");
            label.setAlignment(Pos.CENTER);
            label.setWrapText(false);
            label.setTextOverrun(OverrunStyle.CLIP);

            double padding = 30;
            double finalWidth = textWidth + padding;
            label.setPrefWidth(finalWidth);
            label.setMinWidth(Region.USE_PREF_SIZE);
            label.setMaxWidth(Region.USE_PREF_SIZE);

            flowPane.getChildren().add(label);
        }
        wordListPane.getChildren().add(flowPane);
    }

    // Î¨∏Ï†ú 5Í∞ú Í∞ÄÏ†∏Ïò§Í∏∞
    private void getBlankProblems() {
        List<BlankGame> blankGameList = new ArrayList<>();
        for (Word word : successWords) {
            BlankGame blankGame = new BlankGame();
            blankGame.setWordId(word.getWord_id());
            blankGameList.add(blankGame);
        }

        this.problemList = blankGameService.getBlankProblems(blankGameList, successWords);

        currentProblemIndex = 0;
        success = 0;
        fail = 0;
        successCount.setText("0Í∞ú");
        failCount.setText("0Í∞ú");

        showCurrentProblem();
    }

    // ÌòÑÏû¨ Î¨∏Ï†ú ÌëúÏãú
    private void showCurrentProblem() {
        // Í≥†ÏñëÏù¥ neutralÎ°ú Ï†ÑÌôò
        catImage.setImage(neutralCat);
        currentCatStatus = "neutral";

        // ÏûÖÎ†•Ï∞Ω Ïû†Ïãú ÎπÑÌôúÏÑ±Ìôî
//        inputField.setDisable(true);

        // 2Ï¥à ÌõÑ Î¨∏Ï†ú ÌëúÏãú
        new Thread(() -> {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            javafx.application.Platform.runLater(() -> {
                inputField.setDisable(false); // ÏûÖÎ†•Ï∞Ω Îã§Ïãú ÌôúÏÑ±Ìôî

                if (currentProblemIndex < problemList.size()) {
                    BlankGame currentProblem = problemList.get(currentProblemIndex);
                    timerLabel.setText((currentProblemIndex + 1) + "/" + problemList.size() + " Î¨∏Ï†ú");
                    questionLabel.setText(currentProblem.getQuestionText());
                } else {
                    questionLabel.setText("Î¨∏Ï†úÎ•º Î™®Îëê ÌíÄÏóàÏäµÎãàÎã§!");
                    timerLabel.setText(problemList.size() + "/" + problemList.size() + " Î¨∏Ï†ú");
                    inputField.setDisable(true);
                    showResult();
                }
            });
        }).start();
    }

    // ÏûÖÎ†•Ìïú Îã®Ïñ¥ Ï†ïÎãµ ÌôïÏù∏
    @FXML
    public void checkAnswer() {
        String input = inputField.getText().trim();
        if (input.isEmpty()) return;

        if (currentProblemIndex >= problemList.size()) return;

        BlankGame currentProblem = problemList.get(currentProblemIndex);
        String correctAnswer = getAnswerFromProblem(currentProblem);

        if (input.equalsIgnoreCase(correctAnswer)) {
            success++;
            successCount.setText(success + "Í∞ú");
            updateCatFace("smile");
            questionLabel.setText("ÏôÄ ~ Ï†ïÎãµÏù¥Ïïº o(„ÄÉÔºæ‚ñΩÔºæ„ÄÉ)o");
        } else {
            fail++;
            failCount.setText(fail + "Í∞ú");
            updateCatFace("sad");
            questionLabel.setText("Ïò§ÎãµÏù¥Ïïº (‚äô_‚äô;) Îã®Ïñ¥Ïû•ÏóêÏÑú Î≥µÏäµÌï¥Î¥ê");

            // ÌãÄÎ¶∞Î¨∏Ï†ú Ï†ÄÏû• -> Îã®Ïñ¥Ïû•ÏóêÏÑú Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌï¥
            for (Word word : successWords) {
                if (word.getWord_id() == currentProblem.getWordId()) {
                    Note wrongNote = new Note();
                    wrongNote.setQuestionText(currentProblem.getQuestionText());        // Î¨∏Ï†ú ÎÇ¥Ïö© Ï†ÄÏû•
                    wrongNote.setAnswerText(word.getText());                            // Ï†ïÎãµ Îã®Ïñ¥ Ï†ÄÏû•
                    wrongNote.setMemberId(AppSession.getLoginMember().getMemberId());   // Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä Ï†ÄÏû•
                    wrongNote.setMemo(""); // Ï¥àÍ∏∞ Î©îÎ™®Îäî ÎπàÍ∞íÏúºÎ°ú

                    wrongList.add(wrongNote);
                    break;
                }
            }
            // Îã®Ïñ¥Ïû•Ïóê Ï†ÄÏû•
            noteService.saveWrongNote(wrongList);
        }

        currentProblemIndex++;
        inputField.clear();
        showCurrentProblem();
    }

    // Ï†ïÎãµ ÌôïÏù∏ Î°úÏßÅ
    private String getAnswerFromProblem(BlankGame problem) {
        // ÌòÑÏû¨Îäî Ï†ïÎãµÏùÑ Ï∂îÏ†ïÌï† Ïàò ÏûàÎäî Íµ¨Ï°∞Í∞Ä ÏóÜÏúºÎØÄÎ°ú word_id Í∏∞Ï§ÄÏúºÎ°ú WordÏóêÏÑú Ï∞æÏïÑÏïº Ìï®
        for (Word word : successWords) {
            if (word.getWord_id() == problem.getWordId()) {
                return word.getText(); // Ï†ïÎãµ
            }
        }
        return ""; // ÏòàÏô∏ Î∞©ÏßÄÏö©
    }

    // cat Ïù¥ÎØ∏ÏßÄ Î≥ÄÍ≤Ω
    private void updateCatFace(String newStatus) {
        if (!newStatus.equals(currentCatStatus)) {

            System.out.println("üê± Í≥†ÏñëÏù¥ ÏÉÅÌÉú Î∞îÍøà: " + currentCatStatus + " ‚Üí " + newStatus);
            switch (newStatus) {
                case "smile" -> catImage.setImage(smileCat);
                case "sad" -> catImage.setImage(sadCat);
                case "neutral" -> catImage.setImage(neutralCat);
            }
            currentCatStatus = newStatus;
        }
    }



    // Í≤åÏûÑ Ï¢ÖÎ£å ÌõÑ Í≤∞Í≥ºÏ∞Ω ÎùÑÏö∞Í∏∞
    private void showResult() {
        resultSuccessLabel.setText(successCount.getText()); // Í∏∞Ï°¥ ÏÑ±Í≥µ label Í∞íÏùÑ Í∑∏ÎåÄÎ°ú Î≥µÏÇ¨
        resultFailLabel.setText(failCount.getText());
        resultPane.setVisible(true); // Í≤∞Í≥ºÏ∞Ω Î≥¥Ïó¨Ï§å
    }


    // ÌÉÄÏù¥Ìïë Í≤åÏûÑÏúºÎ°ú Ïù¥Îèô
    @FXML
    public void goToTypingGame() {
        try {
            Parent TypingGameRoot = FXMLLoader.load(getClass().getResource("/allday/minico/view/typinggame/typing_game.fxml"));
            Stage stage = (Stage) backButton.getScene().getWindow();
            stage.getScene().setRoot(TypingGameRoot);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (ÏûÑÏãúÎ°ú Î©îÏù∏ÏúºÎ°ú Í∞ÄÍ≤å Ìï¥ÎÜ®Ïùå !!!)
    @FXML
    private void goToMain() {
        try {
            // Î©îÏù∏ ÌôîÎ©¥ FXML Î°úÎìú
            Parent mainRoot = FXMLLoader.load(getClass().getResource("/allday/minico/view/Miniroom.fxml"));

            // ÌòÑÏû¨ Stage ÏñªÍ∏∞
            Stage stage = (Stage) backButton.getScene().getWindow();

            // Scene Î≥ÄÍ≤Ω
            stage.getScene().setRoot(mainRoot);
        } catch (IOException e) {
            System.err.println("üö´ [ÌôîÎ©¥ Ï†ÑÌôò Ïã§Ìå®] Miniroom.fxml Î°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù");
            System.err.println("Í≤ΩÎ°ú ÌôïÏù∏: /allday/minico/view/Miniroom.fxml");
            e.printStackTrace();
        }
    }
}
